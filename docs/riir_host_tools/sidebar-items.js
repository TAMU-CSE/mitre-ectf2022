initSidebarItems({"constant":[["FLASH_PAGE_SIZE","The size of a single page of flash memory on the TM4C123G."],["FRAME_BAD","Magic byte that indicates failure."],["FRAME_OK","Magic byte that indicates success."],["MAC_SIZE","The size of the MAC used in [`crypto_secretstream`]."],["TAG_SIZE","The size of the message tag used in [`crypto_secretstream`]."]],"fn":[["config_path","Prepends the config path."],["firmware_path","Prepends the firmware path."],["oneshot_hash","Utility function generating a [`Blake2s256`] hash."],["print_banner","Prints a string, but with dashes above and below."],["release_msgs_path","Prepends release message path."],["verify_hash","General utility function to verify data integrity using hashes."]],"struct":[["ConfigPackage","A config update consists of a raw config binary that is dynamically sized and has a confidentiality requirement. This effectively wraps a single [`DynComp`] instance for the raw config and includes three `SignedHash` instances for each component in [`DynComp`]. Since [`DynComp`] encrypts raw data, the confidentiality requirement for config is met, and the [`SignedHashes`] ensures integrity and authenticity for the entire protected package."],["DynComp","Dynamically sized components are described by this struct. The data for this section is encrypted and thus requires a nonce. Additionally, a length header is calculated to inform on the size."],["FirmwarePackage","A firmware update consists of a plaintext version, a release message, and a raw firmware binary."],["SignedHash","Provides authenticity and integrity for a single component."],["SignedHashes","Generic collection of [`SignedHash`] instances ensuring authenticity and integrity for each protected component in a protected package. A top-level [`SignedHash`] is automatically computed, ensuring authenticity and integrity for all the component [`SignedHash`] instances. The top-level [`SignedHash`] collects each [`SignedHash`] instance and defines this collection as a single protected package that cannot be tampered with (mix-and-match)."],["Socket","TCP connection to target device or emulator."]],"type":[["BlakeHash","A [`Blake2s256`] digest."]]});